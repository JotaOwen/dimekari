try
  {Robot,Adapter,TextMessage} = require 'hubot'
catch
  prequire = require('parent-require')
  {Robot,Adapter,TextMessage,User} = prequire 'hubot'

TaringaWrapper = require './TaringaWrapper'
WebSocket = require './ReconnectingWebSocket.js'
util = require 'util'
S = require 'string'
Message  = require '../../../models/message'

class Taringa extends Adapter

  log: (msg) ->
    @robot.logger.info msg

  constructor: ->
    super

  send: (data, strings...) ->
    strings.forEach (str) =>
      if data.user.type is "shout-comment"
        @taringa.shout.add_comment str, data.user.to.obj_id, data.user.to.obj_owner, data.user.to.obj_type
      else if data.user.type is "shout-reply-comment"
        @taringa.shout.add_reply_comment data.user.to.reply_nick + " " + str, data.user.to.obj_id, data.user.to.obj_type,data.user.to.parent

  reply: (data, strings...) ->
    strings.forEach (str) =>
      if data.user.type is "shout-comment"
        @taringa.shout.add_comment str, data.user.to.obj_id, data.user.to.obj_owner, data.user.to.obj_type
      else if data.user.type is "shout-reply-comment"
        @taringa.shout.add_reply_comment data.user.to.reply_nick + " " + str, data.user.to.obj_id, data.user.to.obj_type,data.user.to.parent

  run: ->
    options =
      user         : process.env.HUBOT_TARINGA_USER
      password     : process.env.HUBOT_TARINGA_PASSWORD
      logger       : @robot.logger
    @log "Run"
    @taringa = new TaringaWrapper(options)
    @emit "connected"
    self = @
    @taringa.on 'logged' , ()->
      @request 'http://www.taringa.net/cuenta', (error, response, body) ->
        if !error and response.statusCode is 200
          pattern = /new Realtime\({\"host\":\"(.*?)\",\"port\":(\d+),\"useSSL\":true}(?:[^]+) notifications\('([a-z0-9]+)',/i
          match = pattern.exec body
          if match? and match.length == 4
            ip = match[1]
            port = match[2]
            realtime = match[3]
          else
            self.log 'No se pudo extraer correctamente el hash de realtime'
            return
          ws = new WebSocket 'wss://' + ip + ':' + port + '/ws/' + realtime
          self.log "Listening WebSocket"
          ws.onopen = (event)->
            setInterval ->
              self.taringa.request 'http://www.taringa.net/mi',(error,response,body) ->
                if error
                  self.log "Error al enviar Ping"
                try
                  ws.send "Ping"
                catch err
                  self.log "Error en el WebSocket: #{err}"
            , 7000

          ws.onmessage = (message) ->
            data = JSON.parse message
            dataover = data
            feedName = data.text.event.feedName
            actionName = data.text.event.actionName
            data = data.text
            if data["event"]["image"]?
              user = data["event"]["image"]["href"]
              user = user.substring 1
            else
              user = "undefined"
            #if user.toLowerCase() isnt "overjt"
            #  return
            if actionName is 'new-shout' and (data['event']['object']['parent'] is null or data['event']['object']['parent']['id'] == null)
              self.taringa.shout.get_object data['event']['object']['id'], (error, response) ->
                if error
                  return self.log error
                msg = response['body']
                self.taringa.shout.like data['event']['object']['id'], data['event']['object']['owner']
                self.taringa.shout.fav data['event']['object']['id'], data['event']['object']['owner']
                env =
                  user_nick: user
                  user_id: data['event']['object']['owner']
                  to:
                    obj_id: data["event"]["object"]["id"]
                    obj_owner: data["event"]["object"]["owner"]
                    obj_type: data["event"]["object"]["type"]
                  type: 'shout-comment'
                return self.receive new TextMessage env, msg
            else if actionName is 'comment-new-reply' and '' + data['event']['object']['owner'] is '' + self.taringa.user_id
              self.log "Prueba, todo bien hasta acÃ¡"
              id_comment = data['event']['object']['id']
              id_shout = data['event']['object']['parent']['id']
              id_owner_shout = data['event']['object']['parent']['owner']
              self.taringa.shout.get_replies_comment id_comment, id_shout, id_owner_shout, 'shout', (error, response) ->
                if error
                  self.log error
                  return
                if response['data'].length > 1
                	primeroC = false
                else
                	primeroC = true
                reply = response['data'][0]
                msg = S(reply['comentario']).stripTags().s
                env =
                  user_nick: user
                  user_id: data['event']['object']['owner']
                  to:
                    reply_nick: "@" + reply["nick"]
                    obj_id: id_shout
                    obj_type: data["event"]["object"]["parent"]["type"]
                    parent: reply["parent"]
                  type: 'shout-reply-comment'
                  firstR: primeroC
                return self.receive new TextMessage env, msg
            else if actionName is 'user-new-follower' and ''+data['event']['object']['owner'] is ''+self.taringa.user_id and feedName is 'notification'
              follower_id = self.taringa.user.get_user_id_from_nick user, (error, response) ->
                if error
                  return self.log error
                self.taringa.user.follow response
            else if actionName is 'new-message' and feedName is 'realtime'
              self.taringa.message.getLast (err,msgid) ->
                if err
                  return self.log err

                self.taringa.message.get msgid, (error, datos) ->
                  if error
                    return self.log error
                  Message.findOne { message_id: msgid }, (err, msg_obj) ->
                    if err
                      throw err
                    if msg_obj is null
                      msg_obj = new Message(
                        subject: datos[1]
                        sender: datos[2]
                        message_id: msgid
                        body: datos[4].trim()
                        timestamp: datos[3]
                      )
                      msg_obj.save()
        else
          self.log 'No se pudo conectar a taringa.net'


exports.use = (robot) ->
  new Taringa robot
